digraph "sf::Drawable"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::Drawable\n||+ ~Drawable()\l+ ~Drawable()\l# draw()\l# draw()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Abstract base class for objects that can be drawn to a render target."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{sf::Shape\n||+ ~Shape()\l+ setTexture()\l+ setTextureRect()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getTexture()\l+ getTextureRect()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ getPointCount()\l+ getPoint()\l+ getLocalBounds()\l+ getGlobalBounds()\l+ ~Shape()\l+ setTexture()\l+ setTextureRect()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getTexture()\l+ getTextureRect()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ getPointCount()\l+ getPoint()\l+ getLocalBounds()\l+ getGlobalBounds()\l# Shape()\l# update()\l# Shape()\l# update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Shape.html",tooltip="Base class for textured shapes with outline."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{sf::CircleShape\n||+ CircleShape()\l+ setRadius()\l+ getRadius()\l+ setPointCount()\l+ getPointCount()\l+ getPoint()\l+ CircleShape()\l+ setRadius()\l+ getRadius()\l+ setPointCount()\l+ getPointCount()\l+ getPoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1CircleShape.html",tooltip="Specialized shape representing a circle."];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{sf::ConvexShape\n||+ ConvexShape()\l+ setPointCount()\l+ getPointCount()\l+ setPoint()\l+ getPoint()\l+ ConvexShape()\l+ setPointCount()\l+ getPointCount()\l+ setPoint()\l+ getPoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1ConvexShape.html",tooltip="Specialized shape representing a convex polygon."];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{sf::RectangleShape\n||+ RectangleShape()\l+ setSize()\l+ getSize()\l+ getPointCount()\l+ getPoint()\l+ RectangleShape()\l+ setSize()\l+ getSize()\l+ getPointCount()\l+ getPoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1RectangleShape.html",tooltip="Specialized shape representing a rectangle."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sf::Sprite\n||+ Sprite()\l+ Sprite()\l+ Sprite()\l+ setTexture()\l+ setTextureRect()\l+ setColor()\l+ getTexture()\l+ getTextureRect()\l+ getColor()\l+ getLocalBounds()\l+ getGlobalBounds()\l+ Sprite()\l+ Sprite()\l+ Sprite()\l+ setTexture()\l+ setTextureRect()\l+ setColor()\l+ getTexture()\l+ getTextureRect()\l+ getColor()\l+ getLocalBounds()\l+ getGlobalBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Sprite.html",tooltip="Drawable representation of a texture, with its own transformations, color, etc."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{sf::Text\n||+ Text()\l+ Text()\l+ setString()\l+ setFont()\l+ setCharacterSize()\l+ setLineSpacing()\l+ setLetterSpacing()\l+ setStyle()\l+ setColor()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getString()\l+ getFont()\l+ getCharacterSize()\l+ getLetterSpacing()\l+ getLineSpacing()\l+ getStyle()\l+ getColor()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ findCharacterPos()\l+ getLocalBounds()\l+ getGlobalBounds()\l+ Text()\l+ Text()\l+ setString()\l+ setFont()\l+ setCharacterSize()\l+ setLineSpacing()\l+ setLetterSpacing()\l+ setStyle()\l+ setColor()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getString()\l+ getFont()\l+ getCharacterSize()\l+ getLetterSpacing()\l+ getLineSpacing()\l+ getStyle()\l+ getColor()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ findCharacterPos()\l+ getLocalBounds()\l+ getGlobalBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Text.html",tooltip="Graphical text that can be drawn to a render target."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{sf::VertexArray\n||+ VertexArray()\l+ VertexArray()\l+ getVertexCount()\l+ operator[]()\l+ operator[]()\l+ clear()\l+ resize()\l+ append()\l+ setPrimitiveType()\l+ getPrimitiveType()\l+ getBounds()\l+ VertexArray()\l+ VertexArray()\l+ getVertexCount()\l+ operator[]()\l+ operator[]()\l+ clear()\l+ resize()\l+ append()\l+ setPrimitiveType()\l+ getPrimitiveType()\l+ getBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1VertexArray.html",tooltip="Define a set of one or more 2D primitives."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{sf::VertexBuffer\n||+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ ~VertexBuffer()\l+ create()\l+ getVertexCount()\l+ update()\l+ update()\l+ update()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ setPrimitiveType()\l+ getPrimitiveType()\l+ setUsage()\l+ getUsage()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ ~VertexBuffer()\l+ create()\l+ getVertexCount()\l+ update()\l+ update()\l+ update()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ setPrimitiveType()\l+ getPrimitiveType()\l+ setUsage()\l+ getUsage()\l+ bind()\l+ isAvailable()\l+ bind()\l+ isAvailable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1VertexBuffer.html",tooltip="Vertex buffer storage for one or more 2D primitives."];
}
