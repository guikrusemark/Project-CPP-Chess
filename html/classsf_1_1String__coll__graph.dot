digraph "sf::String"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::String\n||+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ operator std::string()\l+ operator std::wstring()\l+ toAnsiString()\l+ toWideString()\l+ toUtf8()\l+ toUtf16()\l+ toUtf32()\l+ operator=()\l+ operator+=()\l+ operator[]()\l+ operator[]()\l+ clear()\l+ getSize()\l+ isEmpty()\l+ erase()\l+ insert()\l+ find()\l+ replace()\l+ replace()\l+ substring()\l+ getData()\l+ begin()\l+ begin()\l+ end()\l+ end()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ operator std::string()\l+ operator std::wstring()\l+ toAnsiString()\land 28 more...\l+ fromUtf8()\l+ fromUtf16()\l+ fromUtf32()\l+ fromUtf8()\l+ fromUtf16()\l+ fromUtf32()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Utility string class that automatically handles conversions between types and encodings."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +InvalidPos" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{size_t\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
}
