digraph "sf::Shader"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::Shader\n|+ CurrentTexture\l|+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromStream()\l+ loadFromStream()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ getNativeHandle()\l+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\land 38 more...\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Shader class (vertex, geometry and fragment)"];
  Node2 -> Node1 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{sf::GlResource\n||# GlResource()\l# ~GlResource()\l# GlResource()\l# ~GlResource()\l# registerContextDestroyCallback()\l# registerContextDestroyCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1GlResource.html",tooltip="Base class for classes that require an OpenGL context."];
  Node3 -> Node1 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{sf::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l# NonCopyable()\l# ~NonCopyable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1NonCopyable.html",tooltip="Utility class that makes any derived class non-copyable."];
}
