digraph "sf::GlResource"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::GlResource\n||# GlResource()\l# ~GlResource()\l# GlResource()\l# ~GlResource()\l# registerContextDestroyCallback()\l# registerContextDestroyCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Base class for classes that require an OpenGL context."];
  Node1 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{sf::Context\n||+ Context()\l+ ~Context()\l+ setActive()\l+ getSettings()\l+ Context()\l+ Context()\l+ ~Context()\l+ setActive()\l+ getSettings()\l+ Context()\l+ isExtensionAvailable()\l+ getFunction()\l+ getActiveContext()\l+ getActiveContextId()\l+ isExtensionAvailable()\l+ getFunction()\l+ getActiveContext()\l+ getActiveContextId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Context.html",tooltip="Class holding a valid drawing context."];
  Node1 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{sf::Shader\n|+ CurrentTexture\l|+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromStream()\l+ loadFromStream()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ getNativeHandle()\l+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\land 38 more...\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Shader.html",tooltip="Shader class (vertex, geometry and fragment)"];
  Node1 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{sf::Texture\n||+ Texture()\l+ Texture()\l+ ~Texture()\l+ create()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromImage()\l+ getSize()\l+ copyToImage()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ setSmooth()\l+ isSmooth()\l+ setSrgb()\l+ isSrgb()\l+ setRepeated()\l+ isRepeated()\l+ generateMipmap()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ Texture()\l+ Texture()\l+ ~Texture()\l+ create()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromImage()\l+ getSize()\l+ copyToImage()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ setSmooth()\l+ isSmooth()\l+ setSrgb()\l+ isSrgb()\l+ setRepeated()\l+ isRepeated()\l+ generateMipmap()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ bind()\l+ getMaximumSize()\l+ bind()\l+ getMaximumSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Texture.html",tooltip="Image living on the graphics card that can be used for drawing."];
  Node1 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{sf::VertexBuffer\n||+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ ~VertexBuffer()\l+ create()\l+ getVertexCount()\l+ update()\l+ update()\l+ update()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ setPrimitiveType()\l+ getPrimitiveType()\l+ setUsage()\l+ getUsage()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ VertexBuffer()\l+ ~VertexBuffer()\l+ create()\l+ getVertexCount()\l+ update()\l+ update()\l+ update()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ setPrimitiveType()\l+ getPrimitiveType()\l+ setUsage()\l+ getUsage()\l+ bind()\l+ isAvailable()\l+ bind()\l+ isAvailable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1VertexBuffer.html",tooltip="Vertex buffer storage for one or more 2D primitives."];
  Node1 -> Node6 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sf::Window\n||+ Window()\l+ Window()\l+ Window()\l+ ~Window()\l+ create()\l+ create()\l+ close()\l+ isOpen()\l+ getSettings()\l+ pollEvent()\l+ waitEvent()\l+ getPosition()\l+ setPosition()\l+ getSize()\l+ setSize()\l+ setTitle()\l+ setIcon()\l+ setVisible()\l+ setVerticalSyncEnabled()\l+ setMouseCursorVisible()\l+ setMouseCursorGrabbed()\l+ setMouseCursor()\l+ setKeyRepeatEnabled()\l+ setFramerateLimit()\l+ setJoystickThreshold()\l+ setActive()\l+ requestFocus()\l+ hasFocus()\l+ display()\l+ getSystemHandle()\l+ Window()\l+ Window()\l+ Window()\l+ ~Window()\l+ create()\l+ create()\l+ close()\l+ isOpen()\l+ getSettings()\l+ pollEvent()\l+ waitEvent()\l+ getPosition()\l+ setPosition()\l+ getSize()\l+ setSize()\l+ setTitle()\l+ setIcon()\l+ setVisible()\l+ setVerticalSyncEnabled()\l+ setMouseCursorVisible()\l+ setMouseCursorGrabbed()\l+ setMouseCursor()\l+ setKeyRepeatEnabled()\l+ setFramerateLimit()\l+ setJoystickThreshold()\l+ setActive()\l+ requestFocus()\l+ hasFocus()\l+ display()\l+ getSystemHandle()\l# onCreate()\l# onResize()\l# onCreate()\l# onResize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Window.html",tooltip="Window that serves as a target for OpenGL rendering."];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{sf::RenderWindow\n||+ RenderWindow()\l+ RenderWindow()\l+ RenderWindow()\l+ ~RenderWindow()\l+ getSize()\l+ setActive()\l+ capture()\l+ RenderWindow()\l+ RenderWindow()\l+ RenderWindow()\l+ ~RenderWindow()\l+ getSize()\l+ setActive()\l+ capture()\l# onCreate()\l# onResize()\l# onCreate()\l# onResize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1RenderWindow.html",tooltip="Window that can serve as a target for 2D drawing."];
}
