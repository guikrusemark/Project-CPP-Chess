digraph "sf::NonCopyable"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l# NonCopyable()\l# ~NonCopyable()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Utility class that makes any derived class non-copyable."];
  Node1 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{sf::Context\n||+ Context()\l+ ~Context()\l+ setActive()\l+ getSettings()\l+ Context()\l+ Context()\l+ ~Context()\l+ setActive()\l+ getSettings()\l+ Context()\l+ isExtensionAvailable()\l+ getFunction()\l+ getActiveContext()\l+ getActiveContextId()\l+ isExtensionAvailable()\l+ getFunction()\l+ getActiveContext()\l+ getActiveContextId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Context.html",tooltip="Class holding a valid drawing context."];
  Node1 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{sf::Cursor\n||+ Cursor()\l+ ~Cursor()\l+ loadFromPixels()\l+ loadFromSystem()\l+ Cursor()\l+ ~Cursor()\l+ loadFromPixels()\l+ loadFromSystem()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Cursor.html",tooltip="Cursor defines the appearance of a system cursor."];
  Node1 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{sf::FileInputStream\n||+ FileInputStream()\l+ ~FileInputStream()\l+ open()\l+ read()\l+ seek()\l+ tell()\l+ getSize()\l+ FileInputStream()\l+ ~FileInputStream()\l+ open()\l+ read()\l+ seek()\l+ tell()\l+ getSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1FileInputStream.html",tooltip="Implementation of input stream based on a file."];
  Node1 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{sf::Ftp\n||+ ~Ftp()\l+ connect()\l+ disconnect()\l+ login()\l+ login()\l+ keepAlive()\l+ getWorkingDirectory()\l+ getDirectoryListing()\l+ changeDirectory()\l+ parentDirectory()\l+ createDirectory()\l+ deleteDirectory()\l+ renameFile()\l+ deleteFile()\l+ download()\l+ upload()\l+ sendCommand()\l+ ~Ftp()\l+ connect()\l+ disconnect()\l+ login()\l+ login()\l+ keepAlive()\l+ getWorkingDirectory()\l+ getDirectoryListing()\l+ changeDirectory()\l+ parentDirectory()\l+ createDirectory()\l+ deleteDirectory()\l+ renameFile()\l+ deleteFile()\l+ download()\l+ upload()\l+ sendCommand()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Ftp.html",tooltip="A FTP client."];
  Node1 -> Node6 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sf::GlResource::Transient\lContextLock\n||+ TransientContextLock()\l+ ~TransientContextLock()\l+ TransientContextLock()\l+ ~TransientContextLock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1GlResource_1_1TransientContextLock.html",tooltip="RAII helper class to temporarily lock an available context for use."];
  Node1 -> Node7 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{sf::Http\n||+ Http()\l+ Http()\l+ setHost()\l+ sendRequest()\l+ Http()\l+ Http()\l+ setHost()\l+ sendRequest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Http.html",tooltip="A HTTP client."];
  Node1 -> Node8 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{sf::InputSoundFile\n||+ InputSoundFile()\l+ ~InputSoundFile()\l+ openFromFile()\l+ openFromMemory()\l+ openFromStream()\l+ getSampleCount()\l+ getChannelCount()\l+ getSampleRate()\l+ getDuration()\l+ getTimeOffset()\l+ getSampleOffset()\l+ seek()\l+ seek()\l+ read()\l+ InputSoundFile()\l+ ~InputSoundFile()\l+ openFromFile()\l+ openFromMemory()\l+ openFromStream()\l+ getSampleCount()\l+ getChannelCount()\l+ getSampleRate()\l+ getDuration()\l+ getTimeOffset()\l+ getSampleOffset()\l+ seek()\l+ seek()\l+ read()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1InputSoundFile.html",tooltip="Provide read access to sound files."];
  Node1 -> Node9 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{sf::Lock\n||+ Lock()\l+ ~Lock()\l+ Lock()\l+ ~Lock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Lock.html",tooltip="Automatic wrapper for locking and unlocking mutexes."];
  Node1 -> Node10 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{sf::Mutex\n||+ Mutex()\l+ ~Mutex()\l+ lock()\l+ unlock()\l+ Mutex()\l+ ~Mutex()\l+ lock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Mutex.html",tooltip="Blocks concurrent access to shared resources from multiple threads."];
  Node1 -> Node11 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{sf::OutputSoundFile\n||+ OutputSoundFile()\l+ ~OutputSoundFile()\l+ openFromFile()\l+ write()\l+ OutputSoundFile()\l+ ~OutputSoundFile()\l+ openFromFile()\l+ write()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1OutputSoundFile.html",tooltip="Provide write access to sound files."];
  Node1 -> Node12 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{sf::RenderTarget\n||+ ~RenderTarget()\l+ clear()\l+ setView()\l+ getView()\l+ getDefaultView()\l+ getViewport()\l+ mapPixelToCoords()\l+ mapPixelToCoords()\l+ mapCoordsToPixel()\l+ mapCoordsToPixel()\l+ draw()\l+ draw()\l+ draw()\l+ draw()\l+ getSize()\l+ setActive()\l+ pushGLStates()\l+ popGLStates()\l+ resetGLStates()\l+ ~RenderTarget()\l+ clear()\l+ setView()\l+ getView()\l+ getDefaultView()\l+ getViewport()\l+ mapPixelToCoords()\l+ mapPixelToCoords()\l+ mapCoordsToPixel()\l+ mapCoordsToPixel()\l+ draw()\l+ draw()\l+ draw()\l+ draw()\l+ getSize()\l+ setActive()\l+ pushGLStates()\l+ popGLStates()\l+ resetGLStates()\l# RenderTarget()\l# initialize()\l# RenderTarget()\l# initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1RenderTarget.html",tooltip="Base class for all render targets (window, texture, ...)"];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{sf::RenderTexture\n||+ RenderTexture()\l+ ~RenderTexture()\l+ create()\l+ create()\l+ setSmooth()\l+ isSmooth()\l+ setRepeated()\l+ isRepeated()\l+ generateMipmap()\l+ setActive()\l+ display()\l+ getSize()\l+ getTexture()\l+ RenderTexture()\l+ ~RenderTexture()\l+ create()\l+ create()\l+ setSmooth()\l+ isSmooth()\l+ setRepeated()\l+ isRepeated()\l+ generateMipmap()\l+ setActive()\l+ display()\l+ getSize()\l+ getTexture()\l+ getMaximumAntialiasingLevel()\l+ getMaximumAntialiasingLevel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1RenderTexture.html",tooltip="Target for off-screen 2D rendering into a texture."];
  Node12 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{sf::RenderWindow\n||+ RenderWindow()\l+ RenderWindow()\l+ RenderWindow()\l+ ~RenderWindow()\l+ getSize()\l+ setActive()\l+ capture()\l+ RenderWindow()\l+ RenderWindow()\l+ RenderWindow()\l+ ~RenderWindow()\l+ getSize()\l+ setActive()\l+ capture()\l# onCreate()\l# onResize()\l# onCreate()\l# onResize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1RenderWindow.html",tooltip="Window that can serve as a target for 2D drawing."];
  Node1 -> Node15 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{sf::Shader\n|+ CurrentTexture\l|+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromStream()\l+ loadFromStream()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ getNativeHandle()\l+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\land 38 more...\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Shader.html",tooltip="Shader class (vertex, geometry and fragment)"];
  Node1 -> Node16 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{sf::Socket\n||+ ~Socket()\l+ setBlocking()\l+ isBlocking()\l+ ~Socket()\l+ setBlocking()\l+ isBlocking()\l# Socket()\l# getHandle()\l# create()\l# create()\l# close()\l# Socket()\l# getHandle()\l# create()\l# create()\l# close()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Socket.html",tooltip="Base class for all the socket types."];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{sf::TcpListener\n||+ TcpListener()\l+ getLocalPort()\l+ listen()\l+ close()\l+ accept()\l+ TcpListener()\l+ getLocalPort()\l+ listen()\l+ close()\l+ accept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1TcpListener.html",tooltip="Socket that listens to new TCP connections."];
  Node16 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{sf::TcpSocket\n||+ TcpSocket()\l+ getLocalPort()\l+ getRemoteAddress()\l+ getRemotePort()\l+ connect()\l+ disconnect()\l+ send()\l+ send()\l+ receive()\l+ send()\l+ receive()\l+ TcpSocket()\l+ getLocalPort()\l+ getRemoteAddress()\l+ getRemotePort()\l+ connect()\l+ disconnect()\l+ send()\l+ send()\l+ receive()\l+ send()\l+ receive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1TcpSocket.html",tooltip="Specialized socket using the TCP protocol."];
  Node16 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{sf::UdpSocket\n||+ UdpSocket()\l+ getLocalPort()\l+ bind()\l+ unbind()\l+ send()\l+ receive()\l+ send()\l+ receive()\l+ UdpSocket()\l+ getLocalPort()\l+ bind()\l+ unbind()\l+ send()\l+ receive()\l+ send()\l+ receive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1UdpSocket.html",tooltip="Specialized socket using the UDP protocol."];
  Node1 -> Node20 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{sf::Thread\n||+ Thread()\l+ Thread()\l+ Thread()\l+ ~Thread()\l+ launch()\l+ wait()\l+ terminate()\l+ Thread()\l+ Thread()\l+ Thread()\l+ ~Thread()\l+ launch()\l+ wait()\l+ terminate()\l+ Thread()\l+ Thread()\l+ Thread()\l+ Thread()\l+ Thread()\l+ Thread()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Thread.html",tooltip="Utility class to manipulate threads."];
  Node1 -> Node21 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{sf::ThreadLocal\n||+ ThreadLocal()\l+ ~ThreadLocal()\l+ setValue()\l+ getValue()\l+ ThreadLocal()\l+ ~ThreadLocal()\l+ setValue()\l+ getValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1ThreadLocal.html",tooltip="Defines variables with thread-local storage."];
  Node21 -> Node22 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{sf::ThreadLocalPtr\< T \>\n||+ ThreadLocalPtr()\l+ operator*()\l+ operator-\>()\l+ operator T*()\l+ operator=()\l+ operator=()\l+ ThreadLocalPtr()\l+ operator*()\l+ operator-\>()\l+ operator T*()\l+ operator=()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1ThreadLocalPtr.html",tooltip="Pointer to a thread-local variable."];
  Node1 -> Node23 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{sf::Window\n||+ Window()\l+ Window()\l+ Window()\l+ ~Window()\l+ create()\l+ create()\l+ close()\l+ isOpen()\l+ getSettings()\l+ pollEvent()\l+ waitEvent()\l+ getPosition()\l+ setPosition()\l+ getSize()\l+ setSize()\l+ setTitle()\l+ setIcon()\l+ setVisible()\l+ setVerticalSyncEnabled()\l+ setMouseCursorVisible()\l+ setMouseCursorGrabbed()\l+ setMouseCursor()\l+ setKeyRepeatEnabled()\l+ setFramerateLimit()\l+ setJoystickThreshold()\l+ setActive()\l+ requestFocus()\l+ hasFocus()\l+ display()\l+ getSystemHandle()\l+ Window()\l+ Window()\l+ Window()\l+ ~Window()\l+ create()\l+ create()\l+ close()\l+ isOpen()\l+ getSettings()\l+ pollEvent()\l+ waitEvent()\l+ getPosition()\l+ setPosition()\l+ getSize()\l+ setSize()\l+ setTitle()\l+ setIcon()\l+ setVisible()\l+ setVerticalSyncEnabled()\l+ setMouseCursorVisible()\l+ setMouseCursorGrabbed()\l+ setMouseCursor()\l+ setKeyRepeatEnabled()\l+ setFramerateLimit()\l+ setJoystickThreshold()\l+ setActive()\l+ requestFocus()\l+ hasFocus()\l+ display()\l+ getSystemHandle()\l# onCreate()\l# onResize()\l# onCreate()\l# onResize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Window.html",tooltip="Window that serves as a target for OpenGL rendering."];
  Node23 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
}
