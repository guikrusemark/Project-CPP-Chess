digraph "sf::RenderStates"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::RenderStates\n||+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l+ RenderStates()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Define the states used for drawing to a RenderTarget."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +blendMode" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{sf::BlendMode\n||+ BlendMode()\l+ BlendMode()\l+ BlendMode()\l+ BlendMode()\l+ BlendMode()\l+ BlendMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structsf_1_1BlendMode.html",tooltip="Blending modes for drawing."];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +alphaEquation\n+colorEquation" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{Equation\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +alphaSrcFactor\n+colorSrcFactor\n+alphaDstFactor\n+colorDstFactor" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{Factor\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +texture" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{sf::Texture\n||+ Texture()\l+ Texture()\l+ ~Texture()\l+ create()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromImage()\l+ getSize()\l+ copyToImage()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ setSmooth()\l+ isSmooth()\l+ setSrgb()\l+ isSrgb()\l+ setRepeated()\l+ isRepeated()\l+ generateMipmap()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ Texture()\l+ Texture()\l+ ~Texture()\l+ create()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromImage()\l+ getSize()\l+ copyToImage()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ update()\l+ setSmooth()\l+ isSmooth()\l+ setSrgb()\l+ isSrgb()\l+ setRepeated()\l+ isRepeated()\l+ generateMipmap()\l+ operator=()\l+ swap()\l+ getNativeHandle()\l+ bind()\l+ getMaximumSize()\l+ bind()\l+ getMaximumSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Texture.html",tooltip="Image living on the graphics card that can be used for drawing."];
  Node6 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sf::GlResource\n||# GlResource()\l# ~GlResource()\l# GlResource()\l# ~GlResource()\l# registerContextDestroyCallback()\l# registerContextDestroyCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1GlResource.html",tooltip="Base class for classes that require an OpenGL context."];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +shader" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{sf::Shader\n||+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromStream()\l+ loadFromStream()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniform()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setUniformArray()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ setParameter()\l+ getNativeHandle()\l+ Shader()\l+ ~Shader()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromFile()\l+ loadFromMemory()\land 38 more...\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l+ bind()\l+ isAvailable()\l+ isGeometryAvailable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Shader.html",tooltip="Shader class (vertex, geometry and fragment)"];
  Node6 -> Node7 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 -> Node7 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{sf::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l# NonCopyable()\l# ~NonCopyable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1NonCopyable.html",tooltip="Utility class that makes any derived class non-copyable."];
  Node9 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +CurrentTexture" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{sf::Shader::CurrentTextureType\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structsf_1_1Shader_1_1CurrentTextureType.html",tooltip="Special type that can be passed to setUniform(), and that represents the texture of the object being ..."];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +transform" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{sf::Transform\n||+ Transform()\l+ Transform()\l+ getMatrix()\l+ getInverse()\l+ transformPoint()\l+ transformPoint()\l+ transformRect()\l+ combine()\l+ translate()\l+ translate()\l+ rotate()\l+ rotate()\l+ rotate()\l+ scale()\l+ scale()\l+ scale()\l+ scale()\l+ Transform()\l+ Transform()\l+ getMatrix()\l+ getInverse()\l+ transformPoint()\l+ transformPoint()\l+ transformRect()\l+ combine()\l+ translate()\l+ translate()\l+ rotate()\l+ rotate()\l+ rotate()\l+ scale()\l+ scale()\l+ scale()\l+ scale()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Transform.html",tooltip="Define a 3x3 transform matrix."];
  Node10 -> Node10 [color="grey25",fontsize="10",style="solid",label=" +Identity" ,arrowhead="odiamond",fontname="Helvetica"];
  Node1 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +Default" ,arrowhead="odiamond",fontname="Helvetica"];
}
