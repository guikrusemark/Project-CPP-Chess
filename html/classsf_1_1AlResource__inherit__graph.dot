digraph "sf::AlResource"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::AlResource\n||# AlResource()\l# ~AlResource()\l# AlResource()\l# ~AlResource()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Base class for classes that require an OpenAL context."];
  Node1 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{sf::SoundBuffer\n||+ SoundBuffer()\l+ SoundBuffer()\l+ ~SoundBuffer()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromSamples()\l+ saveToFile()\l+ getSamples()\l+ getSampleCount()\l+ getSampleRate()\l+ getChannelCount()\l+ getDuration()\l+ operator=()\l+ SoundBuffer()\l+ SoundBuffer()\l+ ~SoundBuffer()\l+ loadFromFile()\l+ loadFromMemory()\l+ loadFromStream()\l+ loadFromSamples()\l+ saveToFile()\l+ getSamples()\l+ getSampleCount()\l+ getSampleRate()\l+ getChannelCount()\l+ getDuration()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1SoundBuffer.html",tooltip="Storage for audio samples defining a sound."];
  Node1 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{sf::SoundRecorder\n||+ ~SoundRecorder()\l+ start()\l+ stop()\l+ getSampleRate()\l+ setDevice()\l+ getDevice()\l+ setChannelCount()\l+ getChannelCount()\l+ ~SoundRecorder()\l+ start()\l+ stop()\l+ getSampleRate()\l+ setDevice()\l+ getDevice()\l+ setChannelCount()\l+ getChannelCount()\l+ getAvailableDevices()\l+ getDefaultDevice()\l+ isAvailable()\l+ getAvailableDevices()\l+ getDefaultDevice()\l+ isAvailable()\l# SoundRecorder()\l# setProcessingInterval()\l# onStart()\l# onProcessSamples()\l# onStop()\l# SoundRecorder()\l# setProcessingInterval()\l# onStart()\l# onProcessSamples()\l# onStop()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1SoundRecorder.html",tooltip="Abstract base class for capturing sound data."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{sf::SoundBufferRecorder\n||+ ~SoundBufferRecorder()\l+ getBuffer()\l+ ~SoundBufferRecorder()\l+ getBuffer()\l# onStart()\l# onProcessSamples()\l# onStop()\l# onStart()\l# onProcessSamples()\l# onStop()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1SoundBufferRecorder.html",tooltip="Specialized SoundRecorder which stores the captured audio data into a sound buffer."];
  Node1 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{sf::SoundSource\n|# m_source\l|+ SoundSource()\l+ ~SoundSource()\l+ setPitch()\l+ setVolume()\l+ setPosition()\l+ setPosition()\l+ setRelativeToListener()\l+ setMinDistance()\l+ setAttenuation()\l+ getPitch()\l+ getVolume()\l+ getPosition()\l+ isRelativeToListener()\l+ getMinDistance()\l+ getAttenuation()\l+ operator=()\l+ play()\l+ pause()\l+ stop()\l+ getStatus()\l+ SoundSource()\l+ ~SoundSource()\l+ setPitch()\l+ setVolume()\l+ setPosition()\l+ setPosition()\l+ setRelativeToListener()\l+ setMinDistance()\l+ setAttenuation()\l+ getPitch()\l+ getVolume()\l+ getPosition()\l+ isRelativeToListener()\l+ getMinDistance()\l+ getAttenuation()\l+ operator=()\l+ play()\l+ pause()\l+ stop()\l+ getStatus()\l# SoundSource()\l# SoundSource()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1SoundSource.html",tooltip="Base class defining a sound's properties."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sf::Sound\n||+ Sound()\l+ Sound()\l+ Sound()\l+ ~Sound()\l+ play()\l+ pause()\l+ stop()\l+ setBuffer()\l+ setLoop()\l+ setPlayingOffset()\l+ getBuffer()\l+ getLoop()\l+ getPlayingOffset()\l+ getStatus()\l+ operator=()\l+ resetBuffer()\l+ Sound()\l+ Sound()\l+ Sound()\l+ ~Sound()\l+ play()\l+ pause()\l+ stop()\l+ setBuffer()\l+ setLoop()\l+ setPlayingOffset()\l+ getBuffer()\l+ getLoop()\l+ getPlayingOffset()\l+ getStatus()\l+ operator=()\l+ resetBuffer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Sound.html",tooltip="Regular sound that can be played in the audio environment."];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{sf::SoundStream\n||+ ~SoundStream()\l+ play()\l+ pause()\l+ stop()\l+ getChannelCount()\l+ getSampleRate()\l+ getStatus()\l+ setPlayingOffset()\l+ getPlayingOffset()\l+ setLoop()\l+ getLoop()\l+ ~SoundStream()\l+ play()\l+ pause()\l+ stop()\l+ getChannelCount()\l+ getSampleRate()\l+ getStatus()\l+ setPlayingOffset()\l+ getPlayingOffset()\l+ setLoop()\l+ getLoop()\l# SoundStream()\l# initialize()\l# onGetData()\l# onSeek()\l# onLoop()\l# SoundStream()\l# initialize()\l# onGetData()\l# onSeek()\l# onLoop()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1SoundStream.html",tooltip="Abstract base class for streamed audio sources."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{sf::Music\n||+ Music()\l+ ~Music()\l+ openFromFile()\l+ openFromMemory()\l+ openFromStream()\l+ getDuration()\l+ getLoopPoints()\l+ setLoopPoints()\l+ Music()\l+ ~Music()\l+ openFromFile()\l+ openFromMemory()\l+ openFromStream()\l+ getDuration()\l+ getLoopPoints()\l+ setLoopPoints()\l# onGetData()\l# onSeek()\l# onLoop()\l# onGetData()\l# onSeek()\l# onLoop()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Music.html",tooltip="Streamed music played from an audio file."];
}
