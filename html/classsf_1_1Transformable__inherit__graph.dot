digraph "sf::Transformable"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sf::Transformable\n||+ Transformable()\l+ ~Transformable()\l+ setPosition()\l+ setPosition()\l+ setRotation()\l+ setScale()\l+ setScale()\l+ setOrigin()\l+ setOrigin()\l+ getPosition()\l+ getRotation()\l+ getScale()\l+ getOrigin()\l+ move()\l+ move()\l+ rotate()\l+ scale()\l+ scale()\l+ getTransform()\l+ getInverseTransform()\l+ Transformable()\l+ ~Transformable()\l+ setPosition()\l+ setPosition()\l+ setRotation()\l+ setScale()\l+ setScale()\l+ setOrigin()\l+ setOrigin()\l+ getPosition()\l+ getRotation()\l+ getScale()\l+ getOrigin()\l+ move()\l+ move()\l+ rotate()\l+ scale()\l+ scale()\l+ getTransform()\l+ getInverseTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Decomposed transform defined by a position, a rotation and a scale."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{sf::Shape\n||+ ~Shape()\l+ setTexture()\l+ setTextureRect()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getTexture()\l+ getTextureRect()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ getPointCount()\l+ getPoint()\l+ getLocalBounds()\l+ getGlobalBounds()\l+ ~Shape()\l+ setTexture()\l+ setTextureRect()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getTexture()\l+ getTextureRect()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ getPointCount()\l+ getPoint()\l+ getLocalBounds()\l+ getGlobalBounds()\l# Shape()\l# update()\l# Shape()\l# update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Shape.html",tooltip="Base class for textured shapes with outline."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{sf::CircleShape\n||+ CircleShape()\l+ setRadius()\l+ getRadius()\l+ setPointCount()\l+ getPointCount()\l+ getPoint()\l+ CircleShape()\l+ setRadius()\l+ getRadius()\l+ setPointCount()\l+ getPointCount()\l+ getPoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1CircleShape.html",tooltip="Specialized shape representing a circle."];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{sf::ConvexShape\n||+ ConvexShape()\l+ setPointCount()\l+ getPointCount()\l+ setPoint()\l+ getPoint()\l+ ConvexShape()\l+ setPointCount()\l+ getPointCount()\l+ setPoint()\l+ getPoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1ConvexShape.html",tooltip="Specialized shape representing a convex polygon."];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{sf::RectangleShape\n||+ RectangleShape()\l+ setSize()\l+ getSize()\l+ getPointCount()\l+ getPoint()\l+ RectangleShape()\l+ setSize()\l+ getSize()\l+ getPointCount()\l+ getPoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1RectangleShape.html",tooltip="Specialized shape representing a rectangle."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sf::Sprite\n||+ Sprite()\l+ Sprite()\l+ Sprite()\l+ setTexture()\l+ setTextureRect()\l+ setColor()\l+ getTexture()\l+ getTextureRect()\l+ getColor()\l+ getLocalBounds()\l+ getGlobalBounds()\l+ Sprite()\l+ Sprite()\l+ Sprite()\l+ setTexture()\l+ setTextureRect()\l+ setColor()\l+ getTexture()\l+ getTextureRect()\l+ getColor()\l+ getLocalBounds()\l+ getGlobalBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Sprite.html",tooltip="Drawable representation of a texture, with its own transformations, color, etc."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{sf::Text\n||+ Text()\l+ Text()\l+ setString()\l+ setFont()\l+ setCharacterSize()\l+ setLineSpacing()\l+ setLetterSpacing()\l+ setStyle()\l+ setColor()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getString()\l+ getFont()\l+ getCharacterSize()\l+ getLetterSpacing()\l+ getLineSpacing()\l+ getStyle()\l+ getColor()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ findCharacterPos()\l+ getLocalBounds()\l+ getGlobalBounds()\l+ Text()\l+ Text()\l+ setString()\l+ setFont()\l+ setCharacterSize()\l+ setLineSpacing()\l+ setLetterSpacing()\l+ setStyle()\l+ setColor()\l+ setFillColor()\l+ setOutlineColor()\l+ setOutlineThickness()\l+ getString()\l+ getFont()\l+ getCharacterSize()\l+ getLetterSpacing()\l+ getLineSpacing()\l+ getStyle()\l+ getColor()\l+ getFillColor()\l+ getOutlineColor()\l+ getOutlineThickness()\l+ findCharacterPos()\l+ getLocalBounds()\l+ getGlobalBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsf_1_1Text.html",tooltip="Graphical text that can be drawn to a render target."];
}
